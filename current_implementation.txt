[PRIMARY BOT]

> Listens for connections.

> Listens for following events.
>> 1. Check to see if a diagnosis is available.
>> 2. Check if this bot is tethered to a cell indicating having detected a possibly cancerous tumour.
>> 3. Check for a stale connection. If this bot was connected to a team, check if this bot has received any communication from this team in the last set x amount of time or not. If not, reset state.

> Searches for the primary tumour marker. 
>> This search is simulated through requesting for user input such that an input of 1 indicated tumour detected while anything else indicates nothing detected. If nothing is detected for too long (here, if user inputs something other than 1 for a set x no. of trials) then this bot diffuses as it's presence in the body is deemed unnecessary.

> Tumour detected.
>> Update the value in content store with latest self marker value detected.
>> Tether to the current spot.

[NON-PRIMARY BOT]

> Listens for incoming connections.

> Listens for following events.
>> 1. Beacon from primary bot signalling detection of a potentially cancerous tumour.
>>> If this bot is yet to have picked up on a beacon from a primary bot then it searches for a beacon. This behavior is simulated by the non-primary bot sending an interest packet of the from `<self.host>-<self.port>-<self.name>-<self.marker>/beacon/on` to the rendezvous server. 
>>> This search request is repeated for a set t no of trials after every set s seconds. Upon expiry of this set time, the bot is diffused as it's presence in the body is deemed unnecessary.
>> 2. Check to see if a diagnosis is available.
>> 3. Check for a stale connection. If this bot was connected to a team, check if this bot has received any communication from this team in the last set x amount of time or not. If not, reset state.

> Detects a beacon.
>> This is implemented as receipt of a data packet with the substring `beacon` in the name.
>> This bot is now aware of the primary bot's position and data like name, host and port.
>> Adds primary bot's marker data name `marker/tumour` to FIB pointing to primary bot's name.
>> Adds primary marker's value 1 to CS corresponding to content name `marker/tumour`.
>> When bot reaches position of primary bot in bloodstream, it tethers there.
>> Bot detects self marker value from tethered environment. This is simulated by asking user to input the value that this bot detects (1/0).

> Detects self marker value from environment.
>> Update value corresponding to marker in content store.
>> Start neighbor discovery.

[NEIGHBOR DISCOVERY]
TO DO ... 

[RV SERVER]

> Receives interest packet of the from `<self.host>-<self.port>-<self.name>-<self.marker>/beacon/on` from a non-primary bot.
>> Adds this bot to set of non-primary bots.
>> Tries to serve non-primary bots searching for a beacon.
>>> For every interested non-primary bot check if there is a free primary bot that either has a spot in its team for this bot's marker type or has this bot already registered as a team member. If so, assign corresponding primary bot's information to this bot.